{"version":3,"sources":["redux/reducers/todos.ts","redux/actionTypes.ts","redux/reducers/tomatoes.ts","redux/reducers/index.ts","redux/store.ts","config/axios.ts","components/Tomato/Countdown/Countdown.tsx","components/Login/Login.tsx","components/SignUp/SignUp.tsx","redux/actions/todos.ts","components/Todos/TodosItem/TodosItem.tsx","components/Todos/TodosInput/TodosInput.tsx","components/Todos/Todos.tsx","redux/actions/tomatoes.ts","components/Tomato/TomatoesAction/TomatoesAction.tsx","components/Tomato/TomatoList/TomatoList.tsx","components/Tomato/Tomatoes.tsx","components/Statistics/Polygon/Polygon.tsx","components/Statistics/HistoryItem/HistoryItem.tsx","components/Statistics/History/History.tsx","components/Statistics/Statistics.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["todos","state","action","type","payload","map","t","id","Object","assign","editing","tomatoes","console","log","combineReducers","store","createStore","rootReducer","instance","axios","create","baseURL","headers","interceptors","request","use","config","xToken","localStorage","getItem","Authorization","error","Promise","reject","response","setItem","status","createHashHistory","push","timerID","Login","useState","account","setAccount","password","setPassword","history","useHistory","className","size","placeholder","prefix","UserOutlined","onChange","e","target","value","Password","onClick","a","async","post","then","Error","to","SignUp","passwordConfirmation","setPasswordConfirmation","password_confirmation","initTodos","updateTodo","mapDispatchToProps","editTodo","connect","ownProps","props","todo","description","editText","setEditText","commit","deleted","params","put","data","resource","Text","onDoubleClick","Edition","onPressEnter","autoFocus","EnterOutlined","DeleteFilled","todoItemClass","classNames","completed","checked","completed_at","Date","addTodo","setDescription","alert","suffix","unCompleted","length","key","aria-hidden","xlinkHref","updateTomato","CountDown","startCountDown","setInterval","restTime","setState","document","title","clock","onTimeOver","onfinish","clearInterval","timer","this","percent","duration","style","width","minutes","Math","floor","seconds","toString","padStart","React","Component","TomatoesAction","unfinishedTomato","ended_at","setTimeout","confirm","showConfirm","mask","keyboard","onOk","aborted","abortTomato","onCancel","startTomato","nowTime","parse","startedAt","started_at","CloseCircleOutlined","HTML","TomatoItem","format","tomato","TomatoList","list","keys","finishedTomatoGroup","sort","b","splice","date","unfinishedTomatoes","Polygon","fill","stroke","strokeWidth","points","dates","dailyTodo","firstDay","range","getTime","finishedCount","pointArr","x","y","totalCompleted","join","getPoints","editTomato","itemType","updated_at","TabPane","History","getCompletedGroup","_","groupBy","getDates","group","completedList","deletedList","finishedTomatoList","min","forEach","differenceInMinutes","parseISO","hourText","abortTomatoList","abortTomatoes","historyType","defaultActiveKey","tab","Statistics","toggle","setToggle","finishedTomatoes","initTomatoes","filter","unDeleted","user","setUser","useEffect","get","getMe","resources","getTodo","getTomatoes","menu","Item","overlay","trigger","href","preventDefault","DownOutlined","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.48958ae0.chunk.js","sourcesContent":["import {Todo} from '@/types';\nimport {ADD_TODO, INIT_TODOS, UPDATE_TODO, EDIT_TODO} from '@/redux/actionTypes';\n\nconst todos = (state: Todo[], action: any) => {\n  state = state || [];\n  switch (action.type) {\n    case ADD_TODO:\n      return [ action.payload,...state];\n    case INIT_TODOS:\n      return [...action.payload];\n    case UPDATE_TODO:\n      return state.map(t => t.id === action.payload.id ?\n      action.payload : t);\n    case EDIT_TODO:\n      return state.map(t => t.id === action.payload ?\n        Object.assign({}, t, {editing: true})\n        : Object.assign({}, t, {editing: false}));\n    default:\n      return state;\n  }\n};\n\nexport default todos;","export const ADD_TODO = 'ADD_TODO';\nexport const INIT_TODOS = 'INIT_TODOS';\nexport const UPDATE_TODO = 'UPDATE_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\n\nexport const START_TOMATO = 'START_TOMATO';\nexport const INIT_TOMATOES = 'INIT_TOMATOES';\nexport const UPDATE_TOMATO = 'UPDATE_TOMATO';\nexport const EDIT_TOMATO = 'EDIT_TOMATO';\n\n","import {EDIT_TOMATO, INIT_TOMATOES, START_TOMATO, UPDATE_TOMATO} from '@/redux/actionTypes';\nimport {Tomato} from '@/types';\n\nconst tomatoes = (state: Tomato[] = [], action: any) => {\n  switch (action.type) {\n    case START_TOMATO:\n      return [action.payload, ...state];\n    case INIT_TOMATOES:\n      return action.payload;\n    case UPDATE_TOMATO:\n      return state.map(t => t.id === action.payload.id ? action.payload : t);\n    case EDIT_TOMATO:\n      console.log('edit');\n      return state.map(t => t.id === action.payload ?\n        Object.assign({}, t, {editing: true})\n        : Object.assign({}, t, {editing: false}));\n    default:\n      return state;\n  }\n};\n\nexport default tomatoes;\n","import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport tomatoes from './tomatoes'\r\n\r\nexport default combineReducers({\r\n  todos,\r\n  tomatoes\r\n})","import {createStore} from 'redux';\r\nimport rootReducer from './reducers/index';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import axios from 'axios';\r\nimport {createHashHistory} from 'history';\r\n\r\nconst appId = 'syzDKSikpvth7UQxVZjHadf2';\r\nconst appSecret = 'fozkv4EKRftwyuSCTiiFdnLc';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://gp-server.hunger-valley.com/',\r\n  headers: {\r\n    't-app-id': appId,\r\n    't-app-secret': appSecret\r\n  }\r\n});\r\n\r\n// 添加请求拦截器\r\ninstance.interceptors.request.use(config => {\r\n  const xToken = localStorage.getItem('x-token');\r\n  if (xToken) {config.headers.Authorization = `Bearer ${xToken}`;}\r\n  // 在发送请求之前做些什么\r\n  return config;\r\n}, error => {\r\n  // 对请求错误做些什么\r\n  console.error(error);\r\n  return Promise.reject(error);\r\n});\r\n\r\n// 添加响应拦截器\r\ninstance.interceptors.response.use(response => {\r\n  // 对响应数据做点什么\r\n  if (response.headers['x-token']) {\r\n    localStorage.setItem('x-token', response.headers['x-token']);\r\n  }\r\n  return response;\r\n}, error => {\r\n  // 对响应错误做点什么\r\n  if (error.response.status === 401) {\r\n    createHashHistory().push('/login');\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport default instance;","import React from 'react';\nimport './Countdown.less';\n\ninterface ICountDownProps {\n  timer: number,\n  duration: number,\n  onfinish: () => void\n}\n\ninterface IContDownStates {\n  restTime: number\n}\n\nlet timerID: NodeJS.Timeout;\n\nclass CountDown extends React.Component <ICountDownProps, IContDownStates> {\n\n  constructor(props: ICountDownProps) {\n    super(props);\n    this.state = {\n      restTime: this.props.timer\n    };\n  };\n\n  componentDidMount(): void {this.startCountDown();};\n\n  componentWillUnmount(): void {this.onTimeOver();};\n\n  get clock() {\n    const minutes = Math.floor(this.state.restTime / 1000 / 60);\n    const seconds = Math.floor(this.state.restTime / 1000 % 60);\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  startCountDown = () => {\n    timerID = setInterval(() => {\n      const restTime = this.state.restTime;\n      this.setState({restTime: restTime - 1000});\n      document.title = `${this.clock} - 有一个番茄正在进行`;\n      if (restTime < 1000) {\n        this.onTimeOver();\n        document.title = `Tomatodo`;\n      }\n    }, 1000);\n  };\n\n  onTimeOver = () => {\n    this.props.onfinish();\n    document.title = `Tomatodo - 你的番茄土豆`;\n    clearInterval(timerID);\n  };\n\n  public render() {\n    const percent = 1 - this.state.restTime / this.props.duration;\n    return (\n      <div className=\"countdown\">\n        <span>{this.clock}</span>\n        <div className=\"progress\" style={{width: `${percent * 100}%`}}/>\n      </div>\n    );\n  }\n}\n\nexport default CountDown;","import React, {useState} from 'react';\nimport {Input} from 'antd';\nimport {UserOutlined} from '@ant-design/icons';\nimport {Link, useHistory} from 'react-router-dom';\nimport axios from '@/config/axios';\nimport './Login.less';\n\n\nconst Login = () => {\n  const [account, setAccount] = useState('');\n  const [password, setPassword] = useState('');\n  const history = useHistory();\n\n  const commit = async () => {\n    axios.post('sign_in/user', {\n      account,\n      password,\n    }).then(() => {\n      console.log('登陆成功');\n      history.push('/');\n    }, (e) => {\n      throw new Error(e);\n    });\n  };\n  return (\n    <div className=\"login\">\n      <h1>欢迎登陆 Tomatodo</h1>\n      <Input size=\"large\" placeholder=\"请输入用户名\" prefix={<UserOutlined/>}\n             onChange={(e) => {setAccount(e.target.value);}}/>\n      <Input.Password size=\"large\" placeholder=\"请输入密码\" onChange={(e) => {setPassword(e.target.value);}}/>\n      <button onClick={commit} className=\"login-button\">登陆</button>\n      如果没有账号，请立刻<Link to=\"/signUp\" className=\"link\">注册</Link>\n    </div>\n  );\n};\n\nexport default Login;","import React, {useState} from 'react';\r\nimport {Input} from 'antd';\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport axios from '@/config/axios';\r\nimport './SignUp.less';\r\n\r\n\r\nconst SignUp = () => {\r\n  const [account, setAccount] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [passwordConfirmation, setPasswordConfirmation] = useState('');\r\n  const history = useHistory();\r\n\r\n  const commit = async () => {\r\n    axios.post('sign_up/user', {\r\n      account,\r\n      password,\r\n      password_confirmation: passwordConfirmation\r\n    }).then(() => {\r\n      console.log('注册成功');\r\n      history.push('/login');\r\n    }, (e) => {\r\n      throw new Error(e);\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"sign-up\">\r\n      <h1>欢迎注册 Tomatodo</h1>\r\n      <Input size=\"large\" placeholder=\"请输入用户名\" prefix={<UserOutlined/>}\r\n             onChange={(e) => {setAccount(e.target.value);}}/>\r\n      <Input.Password size=\"large\" placeholder=\"请输入密码\" onChange={(e) => {setPassword(e.target.value);}}/>\r\n      <Input.Password size=\"large\" placeholder=\"请再次输入密码\"\r\n                      onChange={(e) => {setPasswordConfirmation(e.target.value);}}/>\r\n      <button onClick={commit} className=\"login-button\">注册</button>\r\n      如果已经有账号，请立刻<Link to=\"/login\" className=\"link\">登陆</Link>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default SignUp;","import {Todo} from '@/types';\nimport {ADD_TODO, INIT_TODOS, UPDATE_TODO, EDIT_TODO} from '@/redux/actionTypes';\n\nexport const addTodo = (payload: Todo) => ({type: ADD_TODO, payload});\nexport const initTodos = (payload: Todo[]) => ({type: INIT_TODOS, payload});\nexport const updateTodo = (payload: Todo[]) => ({type: UPDATE_TODO, payload});\nexport const editTodo = (payload: Todo[]) => ({type: EDIT_TODO, payload});\n\n\n\n","import React, {useState} from 'react';\nimport {updateTodo, editTodo} from '@/redux/actions/todos';\nimport {connect} from 'react-redux';\nimport axios from '@/config/axios';\nimport {Todo} from '@/types';\nimport classNames from 'classnames';\n\nimport './TodosItem.less';\nimport {EnterOutlined, DeleteFilled} from '@ant-design/icons';\nimport {Checkbox, Input} from 'antd';\n\n\ninterface InputItemProps {\n  todo: Todo\n  todos: Todo[]\n  updateTodo: (params: Todo) => Todo[]\n  editTodo: (id: number) => Todo[]\n}\n\nconst TodosItem = (props: InputItemProps) => {\n  const [editText, setEditText] = useState(props.todo.description);\n\n  const commit = () => {\n    editText !== '' ? updateTodo({description: editText}) : updateTodo({deleted: true});};\n\n\n  const updateTodo = async (params: any) => {\n    const {id} = props.todo;\n    try {\n      const response = await axios.put(`todos/${id}`, params);\n      props.updateTodo(response.data.resource);\n    } catch (e) {throw new Error(e);}\n  };\n\n  const toEdit = (id: number) => {props.editTodo(id);};\n\n  const Text = <span onDoubleClick={() => toEdit(props.todo.id)}>{props.todo.description}</span>;\n\n  const Edition = (\n    <div className=\"editing\">\n      <Input\n        placeholder=\"按回车键确认删除这个任务\"\n        value={editText}\n        onChange={(e) => setEditText(e.target.value)}\n        onPressEnter={commit}\n        autoFocus={true}\n      />\n      <div className=\"iconWrapper\">\n        <EnterOutlined onClick={commit}/>\n        <DeleteFilled onClick={() => updateTodo({deleted: true})}/>\n      </div>\n    </div>\n  );\n\n  const todoItemClass = classNames({\n    'input-todos': true,\n    editing: props.todo.editing,\n    completed: props.todo.completed\n  });\n\n\n  return (\n    <div className={todoItemClass}>\n      <Checkbox\n        checked={props.todo.completed}\n        onChange={e => {updateTodo({completed: e.target.checked, completed_at: new Date()});}}>\n      </Checkbox>\n      {props.todo.editing ? Edition : Text}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: { todos: Todo[] }, ownProps: any) => {\n  const todos = state.todos;\n  return {\n    todos,\n    ...ownProps\n  };\n};\n\nconst mapDispatchToProps = {\n  updateTodo,\n  editTodo\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(TodosItem);\n","import React, {useState} from 'react';\nimport {connect} from 'react-redux';\nimport {addTodo} from '@/redux/actions/todos';\nimport axios from '@/config/axios';\n\nimport {Input} from 'antd';\nimport {EnterOutlined} from '@ant-design/icons';\n\ninterface InputTodosProps {addTodo: (params: { description: string }) => void}\n\nconst TodosInput = (props: InputTodosProps) => {\n  const [description, setDescription] = useState('');\n\n  const commit = async () => {\n    if (description !== '') {\n      try {\n        const response = await axios.post('todos', {description});\n        props.addTodo(response.data.resource);\n        setDescription('');\n      } catch (e) {throw new Error(e);}\n    } else {alert('请指定一个todo');}\n  };\n\n\n  return (\n    <div className=\"todo-input\">\n      <Input size=\"large\"\n             placeholder=\"添加新任务\"\n             suffix={description ? <EnterOutlined onClick={commit}/> : <span/>}\n             onChange={e => setDescription(e.target.value)}\n             onPressEnter={commit}\n             value={description}\n      />\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (ownProps: InputTodosProps) => ({\n  ...ownProps\n});\n\nconst mapDispatchToProps = {\n  addTodo\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodosInput);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Todo} from '@/types';\nimport {initTodos} from '@/redux/actions/todos';\n\n\nimport './Todos.less';\nimport InputItem from './TodosItem/TodosItem';\nimport TodosInput from './TodosInput/TodosInput';\n\ninterface TodosProps {\n  completed: Todo[]\n  unCompleted: Todo[]\n}\n\nconst Todos = (props: TodosProps) => {\n\n  const mainHtml = () => {\n    if (props.unCompleted.length > 0 || props.completed.length > 0) {\n      return (\n        <main className=\"todoList\">\n          {\n            props.unCompleted.map((t: Todo) => {\n              return <InputItem key={t.id} todo={t}/>;\n            })\n          }\n          {\n            props.completed.map((t: Todo) => {\n              return <InputItem key={t.id} todo={t}/>;\n            })\n          }\n        </main>\n      );\n    } else {\n      return  (\n        <main className=\"no-record\">\n          <svg className=\"icon\" aria-hidden=\"true\">\n            <use xlinkHref=\"#icon-todo\"/>\n          </svg>\n          <div>没有记录</div>\n        </main>\n      )\n    }\n  };\n\n\n  return (\n    <div className=\"todos\">\n      <TodosInput/>\n      {mainHtml()}\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (state: { todos: Todo[] }, ownProps: any) => {\n  return {...ownProps};\n};\n\nconst mapDispatchToProps = {initTodos};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(Todos);\n\n","import {START_TOMATO, INIT_TOMATOES, UPDATE_TOMATO, EDIT_TOMATO} from '@/redux/actionTypes';\nimport {Tomato} from '@/types';\n\n\nexport const startTomato = (payload: Tomato[]) => ({type: START_TOMATO, payload});\nexport const initTomatoes = (payload: Tomato[]) => ({type: INIT_TOMATOES, payload});\nexport const updateTomato = (payload: Tomato) => ({type: UPDATE_TOMATO, payload});\nexport const editTomato = (payload: Tomato[]) => ({type: EDIT_TOMATO, payload});\n","import React, {useState} from 'react';\r\nimport {Button, Input} from 'antd';\r\nimport {Tomato} from '@/types';\r\nimport Countdown from '@/components/Tomato/Countdown/Countdown';\r\nimport {CloseCircleOutlined} from '@ant-design/icons';\r\nimport {Modal} from 'antd';\r\nimport './TomatoesAction.less';\r\n\r\ninterface TomatoActionProps {\r\n  startTomato: () => void\r\n  unfinishedTomato: Tomato\r\n  updateTomato: (id: number, params: any) => void\r\n}\r\n\r\nconst TomatoesAction = (props: TomatoActionProps) => {\r\n  const [editText, setEditText] = useState('');\r\n\r\n  const commit = () => {\r\n    const {id} = props.unfinishedTomato;\r\n    props.updateTomato(id, {description: editText, ended_at: new Date()});\r\n    // updateTomato 可能网络延迟，避免用户看到空的input\r\n    setTimeout(() => {\r\n      setEditText('');\r\n    }, 500);\r\n  };\r\n\r\n  const onfinish = () => {\r\n    // 为了代替 forceUpdate 的曲线救国\r\n    setEditText(' ');\r\n    setEditText('');\r\n  };\r\n\r\n  const abortTomato = () => {\r\n    const {id} = props.unfinishedTomato;\r\n    props.updateTomato(id, {aborted: true});\r\n  };\r\n\r\n  const {confirm} = Modal;\r\n  const showConfirm = () => {\r\n    confirm({\r\n      title: '您目前正在一个番茄工作时间中，要放弃这个番茄吗？',\r\n      width: 500,\r\n      mask: true,\r\n      keyboard: true,\r\n      onOk() {abortTomato();},\r\n      onCancel() {},\r\n    });\r\n  };\r\n\r\n  const HTML = () => {\r\n    if (!props.unfinishedTomato) {\r\n      return <Button onClick={props.startTomato}\r\n                     className=\"startTomato\">开始一个番茄</Button>;\r\n    } else {\r\n      const {unfinishedTomato} = props;\r\n      // @ts-ignore\r\n      const nowTime = Date.parse(new Date());\r\n      // @ts-ignore\r\n      const startedAt = Date.parse(unfinishedTomato.started_at);\r\n      const {duration} = unfinishedTomato;\r\n      if (nowTime - startedAt <= duration) {\r\n        return (\r\n          <div className=\"timer-wrapper\">\r\n            <Countdown timer={duration - nowTime + startedAt}\r\n                       onfinish={onfinish}\r\n                       duration={duration}\r\n            />\r\n            <CloseCircleOutlined className=\"abort\" onClick={showConfirm}/>\r\n          </div>\r\n        );\r\n      } else if (nowTime - startedAt > duration) {\r\n        return (\r\n          <div className=\"input-wrapper\">\r\n            <Input value={editText}\r\n                   placeholder=\"你刚刚完成了什么工作？\"\r\n                   onChange={e => setEditText(e.target.value)}\r\n                   onPressEnter={commit}\r\n            />\r\n            <CloseCircleOutlined className=\"abort\" onClick={showConfirm}/>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tomato-action\">\r\n      {HTML()}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default TomatoesAction;\r\n","import React from 'react';\r\nimport {Tomato} from '@/types';\r\nimport {format} from 'date-fns';\r\nimport './TomatoList.less';\r\n\r\ninterface TomatoListProps {\r\n  finishedTomatoGroup: {}\r\n}\r\n\r\ninterface TomatoItemProps {\r\n  tomato: Tomato\r\n}\r\n\r\nconst TomatoItem = (props: TomatoItemProps) => {\r\n\r\n  const duration = `${format(new Date(props.tomato.started_at), 'HH:mm')} - \r\n  ${format(new Date(props.tomato.ended_at), 'HH:mm')}`;\r\n\r\n\r\n  return (\r\n    <div className=\"item\">\r\n      <span className='duration'>\r\n        {duration}\r\n      </span>\r\n      <span className=\"description\">{props.tomato.description}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TomatoList = (props: TomatoListProps) => {\r\n\r\n\r\n  const getDates = () => {\r\n    const dates = Object.keys(props.finishedTomatoGroup);\r\n    return dates.sort((a, b) => Date.parse(b) - Date.parse(a)).splice(0, 3);\r\n  };\r\n\r\n\r\n  const list = getDates().map((date) => {\r\n    // @ts-ignore\r\n    const tomatoes = props.finishedTomatoGroup[date];\r\n    return (\r\n      <div key={date} className=\"tomato\">\r\n        <div className=\"title\">\r\n          <span className=\"date\">{format(new Date(date), 'M月d日')}</span>\r\n          <span className=\"finished\">完成了{tomatoes.length}个番茄</span>\r\n        </div>\r\n        {\r\n          tomatoes.map((t: Tomato) => <TomatoItem key={t.id} tomato={t}/>)\r\n        }\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"tomato-list\">\r\n      {list}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TomatoList;","import React from 'react';\r\nimport axios from '@/config/axios';\r\nimport {startTomato, updateTomato} from '@/redux/actions/tomatoes';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './Tomatoes.less';\r\nimport {Tomato} from '@/types';\r\nimport TomatoAction from '@/components/Tomato/TomatoesAction/TomatoesAction';\r\nimport TomatoList from '@/components/Tomato/TomatoList/TomatoList';\r\n\r\ninterface TomatoProps {\r\n  unfinishedTomatoes: Tomato[]\r\n  finishedTomatoGroup: {}\r\n  startTomato: (payload: Tomato) => void\r\n  updateTomato: (payload: Tomato) => void\r\n}\r\n\r\n\r\nconst Tomatoes = (props: TomatoProps) => {\r\n\r\n  const startTomato = async () => {\r\n    try {\r\n      const response = await axios.post('tomatoes', {duration: 1500000});\r\n      props.startTomato(response.data.resource);\r\n    } catch (e) {throw new Error(e);}\r\n  };\r\n\r\n  const updateTomato = async (id: number, params: any) => {\r\n    try {\r\n      const response = await axios.put(`tomatoes/${id}`, params);\r\n      props.updateTomato(response.data.resource);\r\n    } catch (e) {throw new Error(e);}\r\n  };\r\n\r\n  const list = () => {\r\n    console.log(1);\r\n    if (Object.keys(props.finishedTomatoGroup).length > 0) {\r\n      console.log(2);\r\n      return <TomatoList finishedTomatoGroup={props.finishedTomatoGroup}/>\r\n    } else {\r\n      console.log(3);\r\n      return (\r\n        <div className=\"no-record\">\r\n          <svg className=\"icon\" aria-hidden=\"true\">\r\n            <use xlinkHref=\"#icon-alarm-clock\"/>\r\n          </svg>\r\n          <div>没有记录</div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"tomatoes\">\r\n      <TomatoAction startTomato={startTomato}\r\n                    unfinishedTomato={props.unfinishedTomatoes[0]}\r\n                    updateTomato={updateTomato}\r\n      />\r\n      {list()}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: { tomatoes: Tomato[] }, ownProps: any) => {\r\n  return {...ownProps};\r\n};\r\n\r\nconst mapDispatchToProps = {startTomato, updateTomato};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps,)(Tomatoes);\r\n","import React from 'react';\r\nimport './Polygon.less'\r\n\r\ninterface PolygonProps {\r\n  dailyTodo: {}\r\n  totalCompleted: number\r\n}\r\n\r\nconst Polygon = (props: PolygonProps) => {\r\n\r\n  const getPoints = () => {\r\n    const dates = Object.keys(props.dailyTodo).sort((a, b) => {\r\n      return Date.parse(a) - Date.parse(b);\r\n    });\r\n    const firstDay = Date.parse(dates[0]) - 24 * 60 * 60 *1000;\r\n    if (firstDay) {\r\n      const range = new Date().getTime() - firstDay;\r\n      let finishedCount = 0;\r\n      const pointArr = dates.map(date => {\r\n        let x = (Date.parse(date) - firstDay) / range * 240;\r\n        if (range === 0) {x = 240}\r\n        // @ts-ignore\r\n        finishedCount += props.dailyTodo[date].length;\r\n        const y = (1 - finishedCount/props.totalCompleted) * 60;\r\n        return `${x},${y}`;\r\n      });\r\n      return ['0,60', ...pointArr,'240,0','240,60'].join(' ');\r\n    } else {\r\n      return '0,60 240,60';\r\n    }\r\n\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"polygon\">\r\n      <svg>\r\n        <polygon fill=\"rgba(215,78,78,0.1)\" stroke=\"rgba(215,78,78,0.5)\"\r\n                 strokeWidth=\"1\"\r\n                 points={getPoints()}/>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Polygon;","import {Todo, Tomato} from '@/types';\nimport {format} from 'date-fns';\nimport React, {useState} from 'react';\nimport {updateTodo} from '@/redux/actions/todos';\nimport {editTomato, updateTomato} from '@/redux/actions/tomatoes';\nimport {connect} from 'react-redux';\nimport axios from '@/config/axios';\n\nimport './HistoryItem.less';\nimport {Input} from 'antd';\n\ninterface TodoHistoryItemProps {\n  itemType: string\n  data: any\n  updateTodo: (payload: Todo) => void\n  updateTomato: (payload: Tomato) => void\n  editTomato: (id: number) => void\n}\n\nconst HistoryItem = (props: TodoHistoryItemProps) => {\n\n  const [editText, setEditText] = useState(props.data.description);\n\n  const commit = () => {\n    editText !== '' ? updateTomato({description: editText}) : updateTomato({aborted: true});\n  };\n\n\n  const updateTodo = async (params: any) => {\n    const {id} = props.data;\n    try {\n      const response = await axios.put(`todos/${id}`, params);\n      props.updateTodo(response.data.resource);\n    } catch (e) {throw new Error(e);}\n  };\n\n  const updateTomato = async (params: any) => {\n    console.log(1);\n    const {id} = props.data;\n    try {\n      const response = await axios.put(`tomatoes/${id}`, params);\n      props.updateTomato(response.data.resource);\n    } catch (e) {throw new Error(e);}\n  };\n\n\n  const action = () => {\n    if (props.itemType === 'completed') {\n      return (\n        <div className=\"action\">\n          <span onClick={() => updateTodo({completed: false})}>恢复 </span>\n          <span onClick={() => updateTodo({deleted: true})}>删除</span>\n        </div>\n      );\n    } else if (props.itemType === 'deleted') {\n      return (\n        <div className=\"action\">\n          <span onClick={() => updateTodo({deleted: false})}>恢复</span>\n        </div>\n      );\n    } else if (props.itemType === 'finishedToamto') {\n      if (props.data.editing) {\n        return (\n          <div className=\"action editing\">\n            <span onClick={commit}>提交 </span>\n            <span onClick={() => updateTomato({editing: false})}>取消</span>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"action\">\n            <span onClick={() => props.editTomato(props.data.id)}>编辑 </span>\n            <span onClick={() => updateTomato({aborted: true})}>删除</span>\n          </div>\n        );\n      }\n    } else if (props.itemType === 'abortTomato') {\n      if (props.data.editing) {\n        return (\n          <div className=\"action editing\">\n            <span onClick={commit}>提交 </span>\n            <span onClick={() => updateTomato({editing: false})}>取消</span>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"action\">\n            <span onClick={() => props.editTomato(props.data.id)}>编辑 </span>\n          </div>\n        );\n      }\n    }\n  };\n\n  const time = () => {\n    if (props.itemType === 'completed') {\n      return (\n        <span className=\"time\">{format(new Date(props.data.updated_at), 'HH:mm')}</span>\n      );\n    } else if (props.itemType === 'deleted') {\n      return (\n        <span className=\"time\">{format(new Date(props.data.updated_at), 'M月d日')}</span>\n      );\n    } else if (props.itemType === 'finishedToamto') {\n      return (\n        <span className=\"time\">\n          {format(new Date(props.data.started_at), 'HH:mm')}\n          -\n          {format(new Date(props.data.ended_at), 'HH:mm')}\n        </span>\n      );\n    } else if (props.itemType === 'abortTomato') {\n      return (\n        <span className=\"time\">{format(new Date(props.data.started_at), 'M月d日')}</span>\n      );\n    }\n  };\n\n\n  const description = () => {\n    if (props.itemType === 'finishedToamto' || props.itemType === 'abortTomato') {\n      if (props.data.editing) {\n        return (\n          <Input\n            placeholder=\"按回车键确认删除这个任务\"\n            value={editText}\n            onChange={(e) => setEditText(e.target.value)}\n            onPressEnter={commit}\n            autoFocus={true}\n          />\n        );\n      } else {\n        return (<span>{props.data.description || '这是一个没有描述的番茄'}</span>);\n      }\n    } else {\n      return (<span>{props.data.description || '这是一个没有描述的番茄'}</span>);\n    }\n  };\n\n\n  return (\n    <div className=\"item\">\n      <div className=\"detail\">\n        {time()}\n        {description()}\n      </div>\n      {action()}\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (state: { todos: Todo[] }, ownProps: any) => {\n  return {\n    ...ownProps\n  };\n};\n\nconst mapDispatchToProps = {\n  updateTodo,\n  updateTomato,\n  editTomato\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(HistoryItem);\n\n","import React from 'react';\r\nimport {Tabs} from 'antd';\r\nimport {Todo, Tomato} from '@/types';\r\nimport _ from 'lodash';\r\nimport {format, differenceInMinutes, parseISO} from 'date-fns';\r\nimport './History.less';\r\nimport HistoryItem from '@/components/Statistics/HistoryItem/HistoryItem';\r\n\r\nconst {TabPane} = Tabs;\r\n\r\ninterface TodoHistoryProps {\r\n  completed: Todo[]\r\n  deleted: Todo[]\r\n  finishedTomatoGroup: {}\r\n  abortTomatoes: Tomato[]\r\n  historyType: string\r\n}\r\n\r\n\r\nconst History = (props: TodoHistoryProps) => {\r\n\r\n  const getCompletedGroup = () => {\r\n    return _.groupBy(props.completed, (todo) => {\r\n      return format(new Date(todo.updated_at), 'yyyy-MM-d');\r\n    });\r\n  };\r\n\r\n  const getDates = (group: {}) => {\r\n    return Object.keys(group).sort((a, b) => Date.parse(b) - Date.parse(a));\r\n  };\r\n\r\n\r\n  const completedList = getDates(getCompletedGroup()).map(date => {\r\n    const todos = getCompletedGroup()[date];\r\n    return (\r\n      <div key={date} className=\"list\">\r\n        <div className=\"title\">\r\n          <div className=\"date-container\">\r\n            <span className=\"date\">{format(new Date(date), 'M月d日')}</span>\r\n            <span>{format(new Date(date), 'E')}</span>\r\n          </div>\r\n          <span>完成了 {todos.length} 个任务</span>\r\n        </div>\r\n        <div className=\"items\">\r\n          {\r\n            todos.map((todo) => {\r\n              return <HistoryItem data={todo} key={todo.id} itemType=\"completed\"/>;\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const deletedList = props.deleted.map(todo => {\r\n    return (<HistoryItem data={todo} key={todo.id} itemType=\"deleted\"/>);\r\n  });\r\n\r\n  const finishedTomatoList = getDates(props.finishedTomatoGroup).map(date => {\r\n    // @ts-ignore\r\n    const tomatoes = props.finishedTomatoGroup[date];\r\n    let min = 0;\r\n    tomatoes.forEach((tomato: Tomato) => {\r\n      min += differenceInMinutes(parseISO(tomato.ended_at.toString()), parseISO(tomato.started_at.toString()));\r\n    });\r\n    const minText = () => {return ` ${min % 60} 分钟`;};\r\n    const hourText = Math.floor(min / 60) < 1 ? '' : ` ${Math.floor(min / 60)} 小时`;\r\n    return (\r\n      <div key={date} className=\"list\">\r\n        <div className=\"title\">\r\n          <div className=\"date-container\">\r\n            <span className=\"date\">{format(new Date(date), 'M月d日')}</span>\r\n            <span>{format(new Date(date), 'E')}</span>\r\n          </div>\r\n          <div>完成了 {tomatoes.length} 个番茄</div>\r\n          <span>总计\r\n            {hourText}\r\n            {minText()}\r\n          </span>\r\n        </div>\r\n        <div className=\"items\">\r\n          {\r\n            tomatoes.map((tomato: Tomato) => {\r\n              return <HistoryItem data={tomato} key={tomato.id} itemType=\"finishedToamto\"/>;\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const abortTomatoList = props.abortTomatoes.map(tomato => {\r\n    return (<HistoryItem data={tomato} key={tomato.id} itemType=\"abortTomato\"/>);\r\n  });\r\n\r\n  const list = () => {\r\n    if (props.historyType === 'todo') {\r\n      return (\r\n        <div className=\"history\">\r\n          <Tabs defaultActiveKey=\"1\">\r\n            <TabPane tab=\"已完成任务\" key=\"1\">\r\n              {completedList}\r\n            </TabPane>\r\n            <TabPane tab=\"已删除任务\" key=\"2\">\r\n              {deletedList}\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n      );\r\n    } else if (props.historyType === 'tomato') {\r\n      return (\r\n        <div className=\"history\">\r\n          <Tabs defaultActiveKey=\"1\">\r\n            <TabPane tab=\"完成的番茄\" key=\"1\">\r\n              {finishedTomatoList}\r\n            </TabPane>\r\n            <TabPane tab=\"被打断的番茄\" key=\"2\">\r\n              {abortTomatoList}\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {list()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default History;","import React, {useState} from 'react';\r\nimport './Statistics.less';\r\nimport {Todo, Tomato} from '@/types';\r\nimport Polygon from '@/components/Statistics/Polygon/Polygon';\r\nimport History from '@/components/Statistics/History/History';\r\nimport _ from 'lodash';\r\nimport {format} from 'date-fns';\r\n\r\ninterface StatisticsProps {\r\n  completed: Todo[]\r\n  deleted: Todo[]\r\n  finishedTomatoGroup: {}\r\n  finishedTomatoes: Tomato[]\r\n  abortTomatoes: Tomato[]\r\n}\r\n\r\nconst Statistics = (props: StatisticsProps) => {\r\n\r\n  const [toggle, setToggle] = useState('');\r\n\r\n  const dailyTodo = () => {\r\n    return _.groupBy(props.completed, (todo) => {\r\n      return format(new Date(todo.updated_at), 'yyyy-MM-d');\r\n    });\r\n  };\r\n\r\n  const history = () => {\r\n    if (toggle) {\r\n      return <History finishedTomatoGroup={props.finishedTomatoGroup}\r\n                      abortTomatoes={props.abortTomatoes}\r\n                      completed={props.completed}\r\n                      deleted={props.deleted}\r\n                      historyType={toggle}\r\n                      />;\r\n    } else {\r\n      return <span/>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"statistics\">\r\n      <ul>\r\n        <li onClick={() => setToggle('tomato')}\r\n            className={toggle === 'tomato' ? 'active' : ''}>\r\n          <div className=\"text\">\r\n            <span className=\"title\">番茄历史</span>\r\n            <span>累计完成番茄</span>\r\n            <span className=\"count\">{props.finishedTomatoes.length}</span>\r\n          </div>\r\n          <Polygon dailyTodo={props.finishedTomatoGroup} totalCompleted={props.finishedTomatoes.length}/>\r\n        </li>\r\n        <li onClick={() => setToggle('todo')}\r\n            className={toggle === 'todo' ? 'active' : ''}>\r\n          <div className=\"text\">\r\n            <span className=\"title\">任务历史</span>\r\n            <span>累计完成任务</span>\r\n            <span className=\"count\">{props.completed.length}</span>\r\n          </div>\r\n          <Polygon dailyTodo={dailyTodo()} totalCompleted={props.completed.length}/>\r\n        </li>\r\n      </ul>\r\n      {history()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;","import React, {useState, useEffect} from 'react';\nimport axios from '@/config/axios';\nimport {useHistory} from 'react-router-dom';\nimport {Menu, Dropdown} from 'antd/es';\nimport {DownOutlined} from '@ant-design/icons';\nimport '@/components/Home/Home.less';\nimport Todos from '@/components/Todos/Todos';\nimport Tomatoes from '@/components/Tomato/Tomatoes';\nimport {Todo, Tomato} from '@/types';\nimport {initTodos} from '@/redux/actions/todos';\nimport {connect} from 'react-redux';\nimport _ from 'lodash';\nimport {format} from 'date-fns';\nimport {initTomatoes} from '@/redux/actions/tomatoes';\nimport Statistics from '@/components/Statistics/Statistics';\n\ninterface Use {\n  id: number\n  name: string\n  avatar: string\n  extra: string\n  account: string\n  created_at: Date\n  updated_at: Date\n  deleted: boolean\n}\n\n\ninterface HomeProps {\n  initTodos: (todos: Todo[]) => void\n  deleted: Todo[]\n  completed: Todo[]\n  unCompleted: Todo[]\n  unfinishedTomatoes: Tomato[]\n  abortTomatoes: Tomato[]\n  finishedTomatoGroup: {}\n  finishedTomatoes: Tomato[]\n  initTomatoes: (payload: Tomato[]) => void\n}\n\nconst Home = (props: HomeProps) => {\n  const history = useHistory();\n\n  const [user, setUser] = useState({} as Use);\n\n  const getMe = async () => {\n    const response = await axios.get('/me');\n    setUser(response.data);\n  };\n\n  const getTodo = async () => {\n    try {\n      const response = await axios.get('todos');\n      const todos = response.data.resources.map((t: Todo) =>\n        Object.assign({}, t, {editing: false})\n      );\n      props.initTodos(todos);\n    } catch (e) {throw new Error(e);}\n  };\n\n  const getTomatoes = async () => {\n    try {\n      const response = await axios.get('tomatoes');\n      const tomatoes = response.data.resources.map((t: Todo) =>\n        Object.assign({}, t, {editing: false})\n      );\n      props.initTomatoes(tomatoes);\n    } catch (e) {throw new Error(e);}\n  };\n\n  useEffect(() => {\n    getMe();\n    getTodo();\n    getTomatoes();\n  }, []);\n\n  const logout = () => {\n    localStorage.setItem('x-token', '');\n    history.push('/login');\n  };\n\n  const menu = (\n    <Menu>\n      <Menu.Item key=\"1\">\n        <span>偏好设置</span>\n      </Menu.Item>\n      <Menu.Item key=\"2\" onClick={logout}>\n        <span>登出</span>\n      </Menu.Item>\n    </Menu>\n  );\n\n\n  return (\n    <div className=\"index\">\n      <header>\n        <h1>Tomatodo</h1>\n        <Dropdown overlay={menu} trigger={['click']}>\n          <a href=\" \" className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n            <span>{user.account}</span><DownOutlined/>\n          </a>\n        </Dropdown>\n      </header>\n      <main>\n        <Tomatoes finishedTomatoGroup={props.finishedTomatoGroup} unfinishedTomatoes={props.unfinishedTomatoes}/>\n        <Todos completed={props.completed} unCompleted={props.unCompleted}/>\n      </main>\n      <Statistics completed={props.completed}\n                  deleted={props.deleted}\n                  finishedTomatoGroup={props.finishedTomatoGroup}\n                  finishedTomatoes={props.finishedTomatoes}\n                  abortTomatoes={props.abortTomatoes}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: { todos: Todo[], tomatoes: Tomato[] }, ownProps: any) => {\n  const todos = state.todos;\n  const deleted = todos.filter(t => t.deleted);\n  const unDeleted = todos.filter(t => !t.deleted);\n  const completed = unDeleted.filter(t => t.completed) || [];\n  const unCompleted = unDeleted.filter(t => !t.completed) || [];\n  const tomatoes = state.tomatoes;\n  const abortTomatoes = state.tomatoes.filter(t => t.aborted && !t.ended_at);\n  const unfinishedTomatoes = state.tomatoes.filter(t => !t.description && !t.ended_at && !t.aborted);\n  const finishedTomatoes = state.tomatoes.filter(t => t.description && t.ended_at && !t.aborted);\n  const getfinishedTomatoGroup = () => {\n    return _.groupBy(finishedTomatoes, (tomato) => {\n      return format(new Date(tomato.started_at), 'yyyy-MM-d');\n    });\n  };\n  const finishedTomatoGroup = getfinishedTomatoGroup();\n  return {\n    todos,\n    deleted,\n    completed,\n    unCompleted,\n    tomatoes,\n    unfinishedTomatoes,\n    finishedTomatoGroup,\n    finishedTomatoes,\n    abortTomatoes,\n    ...ownProps\n  };\n};\n\nconst mapDispatchToProps = {initTodos, initTomatoes};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport Login from './components/Login/Login';\nimport SignUp from './components/SignUp/SignUp';\nimport Home from './components/Home/Home';\n\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/login\">\n          <Login/>\n        </Route>\n        <Route path=\"/signUp\">\n          <SignUp/>\n        </Route>\n        <Route exact path=\"/\">\n          <Home/>\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from '@/redux/store'\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}