{"version":3,"sources":["redux/reducers/todos.ts","redux/actionTypes.ts","redux/reducers/tomatoes.ts","redux/reducers/index.ts","redux/store.ts","config/axios.ts","components/Tomato/Countdown/Countdown.tsx","components/Login/Login.tsx","components/SignUp/SignUp.tsx","redux/actions/todos.ts","components/Todos/TodosItem/TodosItem.tsx","components/Todos/TodosInput/TodosInput.tsx","components/Todos/Todos.tsx","redux/actions/tomatoes.ts","components/Tomato/TomatoesAction/TomatoesAction.tsx","components/Tomato/TomatoList/TomatoList.tsx","components/Tomato/Tomatoes.tsx","components/Statistics/Polygon/Polygon.tsx","components/Statistics/HistoryItem/HistoryItem.tsx","components/Statistics/History/History.tsx","components/Statistics/Statistics.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["todos","state","action","type","payload","map","t","id","Object","assign","editing","tomatoes","console","log","combineReducers","store","createStore","rootReducer","instance","axios","create","baseURL","headers","interceptors","request","use","config","xToken","localStorage","getItem","Authorization","error","Promise","reject","response","setItem","status","createHashHistory","push","timerID","Login","useState","account","setAccount","password","setPassword","history","useHistory","commit","a","post","then","e","Error","className","size","placeholder","prefix","UserOutlined","onChange","target","value","Password","onClick","to","SignUp","passwordConfirmation","setPasswordConfirmation","password_confirmation","initTodos","updateTodo","mapDispatchToProps","editTodo","connect","ownProps","props","todo","description","editText","setEditText","deleted","params","put","data","resource","Text","onDoubleClick","Edition","onPressEnter","autoFocus","EnterOutlined","DeleteFilled","todoItemClass","classNames","completed","checked","completed_at","Date","addTodo","setDescription","alert","suffix","unCompleted","key","updateTomato","CountDown","startCountDown","setInterval","restTime","setState","document","title","clock","onTimeOver","onfinish","clearInterval","timer","this","percent","duration","style","width","minutes","Math","floor","seconds","toString","padStart","React","Component","TomatoesAction","unfinishedTomato","ended_at","setTimeout","confirm","showConfirm","mask","keyboard","onOk","aborted","abortTomato","onCancel","startTomato","nowTime","parse","startedAt","started_at","CloseCircleOutlined","HTML","TomatoItem","format","tomato","TomatoList","list","keys","finishedTomatoGroup","sort","b","splice","date","length","unfinishedTomatoes","Polygon","fill","stroke","strokeWidth","points","dates","dailyTodo","firstDay","range","getTime","finishedCount","pointArr","x","y","totalCompleted","join","getPoints","editTomato","itemType","updated_at","TabPane","History","getCompletedGroup","_","groupBy","getDates","group","completedList","deletedList","finishedTomatoList","min","forEach","differenceInMinutes","parseISO","hourText","abortTomatoList","abortTomatoes","historyType","defaultActiveKey","tab","Statistics","toggle","setToggle","finishedTomatoes","initTomatoes","filter","unDeleted","user","setUser","getMe","get","getTodo","resources","getTomatoes","useEffect","menu","Item","overlay","trigger","href","preventDefault","DownOutlined","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a1d23c29.chunk.js","sourcesContent":["import {Todo} from '@/types';\nimport {ADD_TODO, INIT_TODOS, UPDATE_TODO, EDIT_TODO} from '@/redux/actionTypes';\n\nconst todos = (state: Todo[], action: any) => {\n  state = state || [];\n  switch (action.type) {\n    case ADD_TODO:\n      return [ action.payload,...state];\n    case INIT_TODOS:\n      return [...action.payload];\n    case UPDATE_TODO:\n      return state.map(t => t.id === action.payload.id ?\n      action.payload : t);\n    case EDIT_TODO:\n      return state.map(t => t.id === action.payload ?\n        Object.assign({}, t, {editing: true})\n        : Object.assign({}, t, {editing: false}));\n    default:\n      return state;\n  }\n};\n\nexport default todos;","export const ADD_TODO = 'ADD_TODO';\nexport const INIT_TODOS = 'INIT_TODOS';\nexport const UPDATE_TODO = 'UPDATE_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\n\nexport const START_TOMATO = 'START_TOMATO';\nexport const INIT_TOMATOES = 'INIT_TOMATOES';\nexport const UPDATE_TOMATO = 'UPDATE_TOMATO';\nexport const EDIT_TOMATO = 'EDIT_TOMATO';\n\n","import {EDIT_TOMATO, INIT_TOMATOES, START_TOMATO, UPDATE_TOMATO} from '@/redux/actionTypes';\nimport {Tomato} from '@/types';\n\nconst tomatoes = (state: Tomato[] = [], action: any) => {\n  switch (action.type) {\n    case START_TOMATO:\n      return [action.payload, ...state];\n    case INIT_TOMATOES:\n      return action.payload;\n    case UPDATE_TOMATO:\n      return state.map(t => t.id === action.payload.id ? action.payload : t);\n    case EDIT_TOMATO:\n      console.log('edit');\n      return state.map(t => t.id === action.payload ?\n        Object.assign({}, t, {editing: true})\n        : Object.assign({}, t, {editing: false}));\n    default:\n      return state;\n  }\n};\n\nexport default tomatoes;\n","import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport tomatoes from './tomatoes'\r\n\r\nexport default combineReducers({\r\n  todos,\r\n  tomatoes\r\n})","import {createStore} from 'redux';\r\nimport rootReducer from './reducers/index';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import axios from 'axios';\r\nimport {createHashHistory} from 'history';\r\n\r\nconst appId = 'syzDKSikpvth7UQxVZjHadf2';\r\nconst appSecret = 'fozkv4EKRftwyuSCTiiFdnLc';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://gp-server.hunger-valley.com/',\r\n  headers: {\r\n    't-app-id': appId,\r\n    't-app-secret': appSecret\r\n  }\r\n});\r\n\r\n// 添加请求拦截器\r\ninstance.interceptors.request.use(config => {\r\n  const xToken = localStorage.getItem('x-token');\r\n  if (xToken) {config.headers.Authorization = `Bearer ${xToken}`;}\r\n  // 在发送请求之前做些什么\r\n  return config;\r\n}, error => {\r\n  // 对请求错误做些什么\r\n  console.error(error);\r\n  return Promise.reject(error);\r\n});\r\n\r\n// 添加响应拦截器\r\ninstance.interceptors.response.use(response => {\r\n  // 对响应数据做点什么\r\n  if (response.headers['x-token']) {\r\n    localStorage.setItem('x-token', response.headers['x-token']);\r\n  }\r\n  return response;\r\n}, error => {\r\n  // 对响应错误做点什么\r\n  if (error.response.status === 401) {\r\n    createHashHistory().push('/login');\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport default instance;","import React from 'react';\r\nimport './Countdown.less';\r\n\r\ninterface ICountDownProps {\r\n  timer: number,\r\n  duration: number,\r\n  onfinish: () => void\r\n}\r\n\r\ninterface IContDownStates {\r\n  restTime: number\r\n}\r\n\r\nlet timerID: NodeJS.Timeout;\r\n\r\nclass CountDown extends React.Component <ICountDownProps, IContDownStates> {\r\n\r\n  constructor(props: ICountDownProps) {\r\n    super(props);\r\n    this.state = {\r\n      restTime: this.props.timer\r\n    };\r\n  };\r\n\r\n  componentDidMount(): void {this.startCountDown();};\r\n\r\n  componentWillUnmount(): void {this.onTimeOver();};\r\n\r\n  get clock() {\r\n    const minutes = Math.floor(this.state.restTime / 1000 / 60);\r\n    const seconds = Math.floor(this.state.restTime / 1000 % 60);\r\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  startCountDown = () => {\r\n    timerID = setInterval(() => {\r\n      const restTime = this.state.restTime;\r\n      this.setState({restTime: restTime - 1000});\r\n      document.title = `${this.clock} - 有一个番茄正在进行`;\r\n      if (restTime < 1000) {\r\n        this.onTimeOver();\r\n        document.title = `Tomatodo`;\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  onTimeOver = () => {\r\n    this.props.onfinish();\r\n    document.title = `Tomato - 你的番茄土豆`;\r\n    clearInterval(timerID);\r\n  };\r\n\r\n  public render() {\r\n    const percent = 1 - this.state.restTime / this.props.duration;\r\n    return (\r\n      <div className=\"countdown\">\r\n        <span>{this.clock}</span>\r\n        <div className=\"progress\" style={{width: `${percent * 100}%`}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountDown;","import React, {useState} from 'react';\nimport {Input} from 'antd';\nimport {UserOutlined} from '@ant-design/icons';\nimport {Link, useHistory} from 'react-router-dom';\nimport axios from '@/config/axios';\nimport './Login.less';\n\n\nconst Login = () => {\n  const [account, setAccount] = useState('');\n  const [password, setPassword] = useState('');\n  const history = useHistory();\n\n  const commit = async () => {\n    axios.post('sign_in/user', {\n      account,\n      password,\n    }).then(() => {\n      console.log('登陆成功');\n      history.push('/');\n    }, (e) => {\n      throw new Error(e);\n    });\n  };\n  return (\n    <div className=\"sign-up\">\n      <h1>欢迎登陆 Tomatodo</h1>\n      <Input size=\"large\" placeholder=\"请输入用户名\" prefix={<UserOutlined/>}\n             onChange={(e) => {setAccount(e.target.value);}}/>\n      <Input.Password size=\"large\" placeholder=\"请输入密码\" onChange={(e) => {setPassword(e.target.value);}}/>\n      <button onClick={commit} className=\"login-button\">登陆</button>\n      如果没有账号，请立刻<Link to=\"/signUp\" className=\"link\">注册</Link>\n    </div>\n  );\n};\n\nexport default Login;","import React, {useState} from 'react';\r\nimport {Input} from 'antd';\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport axios from '@/config/axios';\r\nimport './SignUp.less';\r\n\r\n\r\nconst SignUp = () => {\r\n  const [account, setAccount] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [passwordConfirmation, setPasswordConfirmation] = useState('');\r\n  const history = useHistory();\r\n\r\n  const commit = async () => {\r\n    axios.post('sign_up/user', {\r\n      account,\r\n      password,\r\n      password_confirmation: passwordConfirmation\r\n    }).then(() => {\r\n      console.log('注册成功');\r\n      history.push('/login');\r\n    }, (e) => {\r\n      throw new Error(e);\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"sign-up\">\r\n      <h1>欢迎注册 Tomatodo</h1>\r\n      <Input size=\"large\" placeholder=\"请输入用户名\" prefix={<UserOutlined/>}\r\n             onChange={(e) => {setAccount(e.target.value);}}/>\r\n      <Input.Password size=\"large\" placeholder=\"请输入密码\" onChange={(e) => {setPassword(e.target.value);}}/>\r\n      <Input.Password size=\"large\" placeholder=\"请再次输入密码\"\r\n                      onChange={(e) => {setPasswordConfirmation(e.target.value);}}/>\r\n      <button onClick={commit} className=\"login-button\">注册</button>\r\n      如果已经有账号，请立刻<Link to=\"/login\" className=\"link\">登陆</Link>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default SignUp;","import {Todo} from '@/types';\nimport {ADD_TODO, INIT_TODOS, UPDATE_TODO, EDIT_TODO} from '@/redux/actionTypes';\n\nexport const addTodo = (payload: Todo) => ({type: ADD_TODO, payload});\nexport const initTodos = (payload: Todo[]) => ({type: INIT_TODOS, payload});\nexport const updateTodo = (payload: Todo[]) => ({type: UPDATE_TODO, payload});\nexport const editTodo = (payload: Todo[]) => ({type: EDIT_TODO, payload});\n\n\n\n","import React, {useState} from 'react';\nimport {updateTodo, editTodo} from '@/redux/actions/todos';\nimport {connect} from 'react-redux';\nimport axios from '@/config/axios';\nimport {Todo} from '@/types';\nimport classNames from 'classnames';\n\nimport './TodosItem.less';\nimport {EnterOutlined, DeleteFilled} from '@ant-design/icons';\nimport {Checkbox, Input} from 'antd';\n\n\ninterface InputItemProps {\n  todo: Todo\n  todos: Todo[]\n  updateTodo: (params: Todo) => Todo[]\n  editTodo: (id: number) => Todo[]\n}\n\nconst TodosItem = (props: InputItemProps) => {\n  const [editText, setEditText] = useState(props.todo.description);\n\n  const commit = () => {\n    editText !== '' ? updateTodo({description: editText}) : updateTodo({deleted: true});};\n\n\n  const updateTodo = async (params: any) => {\n    const {id} = props.todo;\n    try {\n      const response = await axios.put(`todos/${id}`, params);\n      props.updateTodo(response.data.resource);\n    } catch (e) {throw new Error(e);}\n  };\n\n  const toEdit = (id: number) => {props.editTodo(id);};\n\n  const Text = <span onDoubleClick={() => toEdit(props.todo.id)}>{props.todo.description}</span>;\n\n  const Edition = (\n    <div className=\"editing\">\n      <Input\n        placeholder=\"按回车键确认删除这个任务\"\n        value={editText}\n        onChange={(e) => setEditText(e.target.value)}\n        onPressEnter={commit}\n        autoFocus={true}\n      />\n      <div className=\"iconWrapper\">\n        <EnterOutlined onClick={commit}/>\n        <DeleteFilled onClick={() => updateTodo({deleted: true})}/>\n      </div>\n    </div>\n  );\n\n  const todoItemClass = classNames({\n    'input-todos': true,\n    editing: props.todo.editing,\n    completed: props.todo.completed\n  });\n\n\n  return (\n    <div className={todoItemClass}>\n      <Checkbox\n        checked={props.todo.completed}\n        onChange={e => {updateTodo({completed: e.target.checked, completed_at: new Date()});}}>\n      </Checkbox>\n      {props.todo.editing ? Edition : Text}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: { todos: Todo[] }, ownProps: any) => {\n  const todos = state.todos;\n  return {\n    todos,\n    ...ownProps\n  };\n};\n\nconst mapDispatchToProps = {\n  updateTodo,\n  editTodo\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(TodosItem);\n","import React, {useState} from 'react';\nimport {connect} from 'react-redux';\nimport {addTodo} from '@/redux/actions/todos';\nimport axios from '@/config/axios';\n\nimport {Input} from 'antd';\nimport {EnterOutlined} from '@ant-design/icons';\n\ninterface InputTodosProps {addTodo: (params: { description: string }) => void}\n\nconst TodosInput = (props: InputTodosProps) => {\n  const [description, setDescription] = useState('');\n\n  const commit = async () => {\n    if (description !== '') {\n      try {\n        const response = await axios.post('todos', {description});\n        props.addTodo(response.data.resource);\n        setDescription('');\n      } catch (e) {throw new Error(e);}\n    } else {alert('请指定一个todo');}\n  };\n\n\n  return (\n    <div className=\"todo-input\">\n      <Input size=\"large\"\n             placeholder=\"添加新任务\"\n             suffix={description ? <EnterOutlined onClick={commit}/> : <span/>}\n             onChange={e => setDescription(e.target.value)}\n             onPressEnter={commit}\n             value={description}\n      />\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (ownProps: InputTodosProps) => ({\n  ...ownProps\n});\n\nconst mapDispatchToProps = {\n  addTodo\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodosInput);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Todo} from '@/types';\nimport {initTodos} from '@/redux/actions/todos';\n\n\nimport './Todos.less';\nimport InputItem from './TodosItem/TodosItem';\nimport TodosInput from './TodosInput/TodosInput';\n\ninterface TodosProps {\n  completed: Todo[]\n  unCompleted: Todo[]\n}\n\nconst Todos = (props: TodosProps) => {\n\n\n  return (\n    <div className=\"todos\">\n      <TodosInput/>\n      <main className=\"todoList\">\n        {\n          props.unCompleted.map((t: Todo) => {\n            return <InputItem key={t.id} todo={t}/>;\n          })\n        }\n        {\n          props.completed.map((t: Todo) => {\n            return <InputItem key={t.id} todo={t}/>;\n          })\n        }\n      </main>\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (state: { todos: Todo[] }, ownProps: any) => {\n  return {...ownProps}\n};\n\nconst mapDispatchToProps = {initTodos};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(Todos);\n\n","import {START_TOMATO, INIT_TOMATOES, UPDATE_TOMATO, EDIT_TOMATO} from '@/redux/actionTypes';\nimport {Tomato} from '@/types';\n\n\nexport const startTomato = (payload: Tomato[]) => ({type: START_TOMATO, payload});\nexport const initTomatoes = (payload: Tomato[]) => ({type: INIT_TOMATOES, payload});\nexport const updateTomato = (payload: Tomato) => ({type: UPDATE_TOMATO, payload});\nexport const editTomato = (payload: Tomato[]) => ({type: EDIT_TOMATO, payload});\n","import React, {useState} from 'react';\r\nimport {Button, Input} from 'antd';\r\nimport {Tomato} from '@/types';\r\nimport Countdown from '@/components/Tomato/Countdown/Countdown';\r\nimport {CloseCircleOutlined} from '@ant-design/icons';\r\nimport {Modal} from 'antd';\r\nimport './TomatoesAction.less';\r\n\r\ninterface TomatoActionProps {\r\n  startTomato: () => void\r\n  unfinishedTomato: Tomato\r\n  updateTomato: (id: number, params: any) => void\r\n}\r\n\r\nconst TomatoesAction = (props: TomatoActionProps) => {\r\n  const [editText, setEditText] = useState('');\r\n\r\n  const commit = () => {\r\n    const {id} = props.unfinishedTomato;\r\n    props.updateTomato(id, {description: editText, ended_at: new Date()});\r\n    // updateTomato 可能网络延迟，避免用户看到空的input\r\n    setTimeout(() => {\r\n      setEditText('');\r\n    }, 500);\r\n  };\r\n\r\n  const onfinish = () => {\r\n    // 为了代替 forceUpdate 的曲线救国\r\n    setEditText(' ');\r\n    setEditText('');\r\n  };\r\n\r\n  const abortTomato = () => {\r\n    const {id} = props.unfinishedTomato;\r\n    props.updateTomato(id, {aborted: true});\r\n  };\r\n\r\n  const {confirm} = Modal;\r\n  const showConfirm = () => {\r\n    confirm({\r\n      title: '您目前正在一个番茄工作时间中，要放弃这个番茄吗？',\r\n      width: 500,\r\n      mask: true,\r\n      keyboard: true,\r\n      onOk() {abortTomato();},\r\n      onCancel() {},\r\n    });\r\n  };\r\n\r\n  const HTML = () => {\r\n    if (!props.unfinishedTomato) {\r\n      return <Button onClick={props.startTomato}\r\n                     className=\"startTomato\">开始一个番茄</Button>;\r\n    } else {\r\n      const {unfinishedTomato} = props;\r\n      // @ts-ignore\r\n      const nowTime = Date.parse(new Date());\r\n      // @ts-ignore\r\n      const startedAt = Date.parse(unfinishedTomato.started_at);\r\n      const {duration} = unfinishedTomato;\r\n      if (nowTime - startedAt <= duration) {\r\n        return (\r\n          <div className=\"timer-wrapper\">\r\n            <Countdown timer={duration - nowTime + startedAt}\r\n                       onfinish={onfinish}\r\n                       duration={duration}\r\n            />\r\n            <CloseCircleOutlined className=\"abort\" onClick={showConfirm}/>\r\n          </div>\r\n        );\r\n      } else if (nowTime - startedAt > duration) {\r\n        return (\r\n          <div className=\"input-wrapper\">\r\n            <Input value={editText}\r\n                   placeholder=\"你刚刚完成了什么工作？\"\r\n                   onChange={e => setEditText(e.target.value)}\r\n                   onPressEnter={commit}\r\n            />\r\n            <CloseCircleOutlined className=\"abort\" onClick={showConfirm}/>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tomato-action\">\r\n      {HTML()}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default TomatoesAction;\r\n","import React from 'react';\r\nimport {Tomato} from '@/types';\r\nimport {format} from 'date-fns';\r\nimport './TomatoList.less'\r\n\r\ninterface TomatoListProps {\r\n  finishedTomatoGroup: {}\r\n}\r\n\r\ninterface TomatoItemProps {\r\n  tomato: Tomato\r\n}\r\n\r\nconst TomatoItem = (props: TomatoItemProps) => {\r\n  return (\r\n    <div className=\"item\">\r\n      <span className='duration'>\r\n        {format(new Date(props.tomato.started_at), 'HH:mm')}\r\n          -\r\n        {format(new Date(props.tomato.ended_at), 'HH:mm')}\r\n      </span>\r\n      <span className=\"description\">{props.tomato.description}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TomatoList = (props: TomatoListProps) => {\r\n\r\n\r\n  const getDates = () => {\r\n    const dates = Object.keys(props.finishedTomatoGroup);\r\n    return dates.sort((a, b) => Date.parse(b) - Date.parse(a)).splice(0,3);\r\n  };\r\n\r\n\r\n\r\n  const list = getDates().map((date) => {\r\n    // @ts-ignore\r\n    const tomatoes = props.finishedTomatoGroup[date];\r\n    return (\r\n      <div key={date} className=\"tomato\">\r\n        <div className=\"title\">\r\n          <span className=\"date\">{format(new Date(date), 'M月d日')}</span>\r\n          <span className=\"finished\">完成了{tomatoes.length}个番茄</span>\r\n        </div>\r\n        {\r\n          tomatoes.map((t: Tomato) => <TomatoItem key={t.id} tomato={t}/>)\r\n        }\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"tomato-list\">\r\n      {list}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TomatoList;","import React from 'react';\r\nimport axios from '@/config/axios';\r\nimport {startTomato, updateTomato} from '@/redux/actions/tomatoes';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './Tomatoes.less';\r\nimport {Tomato} from '@/types';\r\nimport TomatoAction from '@/components/Tomato/TomatoesAction/TomatoesAction';\r\nimport TomatoList from '@/components/Tomato/TomatoList/TomatoList';\r\n\r\ninterface TomatoProps {\r\n  unfinishedTomatoes: Tomato[]\r\n  finishedTomatoGroup: {}\r\n  startTomato: (payload: Tomato) => void\r\n  updateTomato: (payload: Tomato) => void\r\n}\r\n\r\n\r\nconst Tomatoes = (props: TomatoProps) => {\r\n\r\n  const startTomato = async () => {\r\n    try {\r\n      const response = await axios.post('tomatoes', {duration: 1500000});\r\n      props.startTomato(response.data.resource);\r\n    } catch (e) {throw new Error(e);}\r\n  };\r\n\r\n  const updateTomato = async (id: number, params: any) => {\r\n    try {\r\n      const response = await axios.put(`tomatoes/${id}`, params);\r\n      props.updateTomato(response.data.resource);\r\n    } catch (e) {throw new Error(e);}\r\n  };\r\n\r\n  return (\r\n    <div className=\"tomatoes\">\r\n      <TomatoAction startTomato={startTomato}\r\n                    unfinishedTomato={props.unfinishedTomatoes[0]}\r\n                    updateTomato={updateTomato}\r\n      />\r\n      <TomatoList finishedTomatoGroup={props.finishedTomatoGroup}/>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: { tomatoes: Tomato[] }, ownProps: any) => {\r\n  return {...ownProps};\r\n};\r\n\r\nconst mapDispatchToProps = {startTomato, updateTomato};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps,)(Tomatoes);\r\n","import React from 'react';\r\nimport './Polygon.less'\r\n\r\ninterface PolygonProps {\r\n  dailyTodo: {}\r\n  totalCompleted: number\r\n}\r\n\r\nconst Polygon = (props: PolygonProps) => {\r\n\r\n  const getPoints = () => {\r\n    const dates = Object.keys(props.dailyTodo).sort((a, b) => {\r\n      return Date.parse(a) - Date.parse(b);\r\n    });\r\n    const firstDay = Date.parse(dates[0]) - 24 * 60 * 60 *1000;\r\n    if (firstDay) {\r\n      const range = new Date().getTime() - firstDay;\r\n      let finishedCount = 0;\r\n      const pointArr = dates.map(date => {\r\n        let x = (Date.parse(date) - firstDay) / range * 240;\r\n        if (range === 0) {x = 240}\r\n        // @ts-ignore\r\n        finishedCount += props.dailyTodo[date].length;\r\n        const y = (1 - finishedCount/props.totalCompleted) * 60;\r\n        return `${x},${y}`;\r\n      });\r\n      return ['0,60', ...pointArr,'240,0','240,60'].join(' ');\r\n    } else {\r\n      return '0,60 240,60';\r\n    }\r\n\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"polygon\">\r\n      <svg>\r\n        <polygon fill=\"rgba(215,78,78,0.1)\" stroke=\"rgba(215,78,78,0.5)\"\r\n                 strokeWidth=\"1\"\r\n                 points={getPoints()}/>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Polygon;","import {Todo, Tomato} from '@/types';\nimport {format} from 'date-fns';\nimport React, {useState} from 'react';\nimport {updateTodo} from '@/redux/actions/todos';\nimport {editTomato, updateTomato} from '@/redux/actions/tomatoes';\nimport {connect} from 'react-redux';\nimport axios from '@/config/axios';\n\nimport './HistoryItem.less';\nimport {Input} from 'antd';\n\ninterface TodoHistoryItemProps {\n  itemType: string\n  data: any\n  updateTodo: (payload: Todo) => void\n  updateTomato: (payload: Tomato) => void\n  editTomato: (id: number) => void\n}\n\nconst HistoryItem = (props: TodoHistoryItemProps) => {\n\n  const [editText, setEditText] = useState(props.data.description);\n\n  const commit = () => {\n    editText !== '' ? updateTomato({description: editText}) : updateTomato({aborted: true});\n  };\n\n\n  const updateTodo = async (params: any) => {\n    const {id} = props.data;\n    try {\n      const response = await axios.put(`todos/${id}`, params);\n      props.updateTodo(response.data.resource);\n    } catch (e) {throw new Error(e);}\n  };\n\n  const updateTomato = async (params: any) => {\n    console.log(1);\n    const {id} = props.data;\n    try {\n      const response = await axios.put(`tomatoes/${id}`, params);\n      props.updateTomato(response.data.resource);\n    } catch (e) {throw new Error(e);}\n  };\n\n\n  const action = () => {\n    if (props.itemType === 'completed') {\n      return (\n        <div className=\"action\">\n          <span onClick={() => updateTodo({completed: false})}>恢复 </span>\n          <span onClick={() => updateTodo({deleted: true})}>删除</span>\n        </div>\n      );\n    } else if (props.itemType === 'deleted') {\n      return (\n        <div className=\"action\">\n          <span onClick={() => updateTodo({deleted: false})}>恢复</span>\n        </div>\n      );\n    } else if (props.itemType === 'finishedToamto') {\n      if (props.data.editing) {\n        return (\n          <div className=\"action editing\">\n            <span onClick={commit}>提交 </span>\n            <span onClick={() => updateTomato({editing: false})}>取消</span>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"action\">\n            <span onClick={() => props.editTomato(props.data.id)}>编辑 </span>\n            <span onClick={() => updateTomato({aborted: true})}>删除</span>\n          </div>\n        );\n      }\n    } else if (props.itemType === 'abortTomato') {\n      if (props.data.editing) {\n        return (\n          <div className=\"action editing\">\n            <span onClick={commit}>提交 </span>\n            <span onClick={() => updateTomato({editing: false})}>取消</span>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"action\">\n            <span onClick={() => props.editTomato(props.data.id)}>编辑 </span>\n          </div>\n        );\n      }\n    }\n  };\n\n  const time = () => {\n    if (props.itemType === 'completed') {\n      return (\n        <span className=\"time\">{format(new Date(props.data.updated_at), 'HH:mm')}</span>\n      );\n    } else if (props.itemType === 'deleted') {\n      return (\n        <span className=\"time\">{format(new Date(props.data.updated_at), 'M月d日')}</span>\n      );\n    } else if (props.itemType === 'finishedToamto') {\n      return (\n        <span className=\"time\">\n          {format(new Date(props.data.started_at), 'HH:mm')}\n          -\n          {format(new Date(props.data.ended_at), 'HH:mm')}\n        </span>\n      );\n    } else if (props.itemType === 'abortTomato') {\n      return (\n        <span className=\"time\">{format(new Date(props.data.started_at), 'M月d日')}</span>\n      );\n    }\n  };\n\n\n  const description = () => {\n    if (props.itemType === 'finishedToamto' || props.itemType === 'abortTomato') {\n      if (props.data.editing) {\n        return (\n          <Input\n            placeholder=\"按回车键确认删除这个任务\"\n            value={editText}\n            onChange={(e) => setEditText(e.target.value)}\n            onPressEnter={commit}\n            autoFocus={true}\n          />\n        );\n      } else {\n        return (<span>{props.data.description || '这是一个没有描述的番茄'}</span>);\n      }\n    } else {\n      return (<span>{props.data.description || '这是一个没有描述的番茄'}</span>);\n    }\n  };\n\n\n  return (\n    <div className=\"item\">\n      <div className=\"detail\">\n        {time()}\n        {description()}\n      </div>\n      {action()}\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (state: { todos: Todo[] }, ownProps: any) => {\n  return {\n    ...ownProps\n  };\n};\n\nconst mapDispatchToProps = {\n  updateTodo,\n  updateTomato,\n  editTomato\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(HistoryItem);\n\n","import React from 'react';\r\nimport {Tabs} from 'antd';\r\nimport {Todo, Tomato} from '@/types';\r\nimport _ from 'lodash';\r\nimport {format, differenceInMinutes, parseISO} from 'date-fns';\r\nimport './History.less';\r\nimport HistoryItem from '@/components/Statistics/HistoryItem/HistoryItem';\r\n\r\nconst {TabPane} = Tabs;\r\n\r\ninterface TodoHistoryProps {\r\n  completed: Todo[]\r\n  deleted: Todo[]\r\n  finishedTomatoGroup: {}\r\n  abortTomatoes: Tomato[]\r\n  historyType: string\r\n}\r\n\r\n\r\nconst History = (props: TodoHistoryProps) => {\r\n\r\n  const getCompletedGroup = () => {\r\n    return _.groupBy(props.completed, (todo) => {\r\n      return format(new Date(todo.updated_at), 'yyyy-MM-d');\r\n    });\r\n  };\r\n\r\n  const getDates = (group: {}) => {\r\n    return Object.keys(group).sort((a, b) => Date.parse(b) - Date.parse(a));\r\n  };\r\n\r\n\r\n  const completedList = getDates(getCompletedGroup()).map(date => {\r\n    const todos = getCompletedGroup()[date];\r\n    return (\r\n      <div key={date} className=\"list\">\r\n        <div className=\"title\">\r\n          <div>\r\n            <span className=\"date\">{format(new Date(date), 'M月d日')}</span>\r\n            <span>{format(new Date(date), 'E')}</span>\r\n          </div>\r\n          <span>完成了 {todos.length} 个任务</span>\r\n        </div>\r\n        <div className=\"items\">\r\n          {\r\n            todos.map((todo) => {\r\n              return <HistoryItem data={todo} key={todo.id} itemType=\"completed\"/>;\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const deletedList = props.deleted.map(todo => {\r\n    return (<HistoryItem data={todo} key={todo.id} itemType=\"deleted\"/>);\r\n  });\r\n\r\n  const finishedTomatoList = getDates(props.finishedTomatoGroup).map(date => {\r\n    // @ts-ignore\r\n    const tomatoes = props.finishedTomatoGroup[date];\r\n    let min = 0;\r\n    tomatoes.forEach((tomato: Tomato) => {\r\n      min += differenceInMinutes(parseISO(tomato.ended_at.toString()), parseISO(tomato.started_at.toString()));\r\n    });\r\n    const minText = () => {return ` ${min % 60} 分钟`;};\r\n    const hourText = Math.floor(min / 60) < 1 ? '' : ` ${Math.floor(min / 60)} 小时`;\r\n    return (\r\n      <div key={date} className=\"list\">\r\n        <div className=\"title\">\r\n          <div>\r\n            <span className=\"date\">{format(new Date(date), 'M月d日')}</span>\r\n            <span>{format(new Date(date), 'E')}</span>\r\n          </div>\r\n          <div>完成了 {tomatoes.length} 个番茄</div>\r\n          <span>总计\r\n            {hourText}\r\n            {minText()}\r\n          </span>\r\n        </div>\r\n        <div className=\"items\">\r\n          {\r\n            tomatoes.map((tomato: Tomato) => {\r\n              return <HistoryItem data={tomato} key={tomato.id} itemType=\"finishedToamto\"/>;\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const abortTomatoList = props.abortTomatoes.map(tomato => {\r\n    return (<HistoryItem data={tomato} key={tomato.id} itemType=\"abortTomato\"/>);\r\n  });\r\n\r\n  const list = () => {\r\n    if (props.historyType === 'todo') {\r\n      console.log(1);\r\n      return (\r\n        <div className=\"todo-history\">\r\n          <Tabs defaultActiveKey=\"1\">\r\n            <TabPane tab=\"已完成任务\" key=\"1\">\r\n              {completedList}\r\n            </TabPane>\r\n            <TabPane tab=\"已删除任务\" key=\"2\">\r\n              {deletedList}\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n      );\r\n    } else if (props.historyType === 'tomato') {\r\n      return (\r\n        <div className=\"todo-history\">\r\n          <Tabs defaultActiveKey=\"1\">\r\n            <TabPane tab=\"完成的番茄\" key=\"1\">\r\n              {finishedTomatoList}\r\n            </TabPane>\r\n            <TabPane tab=\"被打断的番茄\" key=\"2\">\r\n              {abortTomatoList}\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {list()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default History;","import React, {useState} from 'react';\r\nimport './Statistics.less';\r\nimport {Todo, Tomato} from '@/types';\r\nimport Polygon from '@/components/Statistics/Polygon/Polygon';\r\nimport History from '@/components/Statistics/History/History';\r\nimport _ from 'lodash';\r\nimport {format} from 'date-fns';\r\n\r\ninterface StatisticsProps {\r\n  completed: Todo[]\r\n  deleted: Todo[]\r\n  finishedTomatoGroup: {}\r\n  finishedTomatoes: Tomato[]\r\n  abortTomatoes: Tomato[]\r\n}\r\n\r\nconst Statistics = (props: StatisticsProps) => {\r\n\r\n  const [toggle, setToggle] = useState('');\r\n\r\n  const dailyTodo = () => {\r\n    return _.groupBy(props.completed, (todo) => {\r\n      return format(new Date(todo.updated_at), 'yyyy-MM-d');\r\n    });\r\n  };\r\n\r\n  const history = () => {\r\n    if (toggle) {\r\n      return <History finishedTomatoGroup={props.finishedTomatoGroup}\r\n                      abortTomatoes={props.abortTomatoes}\r\n                      completed={props.completed}\r\n                      deleted={props.deleted}\r\n                      historyType={toggle}\r\n                      />;\r\n    } else {\r\n      return <span/>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"statistics\">\r\n      <ul>\r\n        <li onClick={() => setToggle('tomato')}\r\n            className={toggle === 'tomato' ? 'active' : ''}>\r\n          <div className=\"text\">\r\n            <span className=\"title\">番茄历史</span>\r\n            <span>累计完成番茄</span>\r\n            <span className=\"count\">{props.finishedTomatoes.length}</span>\r\n          </div>\r\n          <Polygon dailyTodo={props.finishedTomatoGroup} totalCompleted={props.finishedTomatoes.length}/>\r\n        </li>\r\n        <li onClick={() => setToggle('todo')}\r\n            className={toggle === 'todo' ? 'active' : ''}>\r\n          <div className=\"text\">\r\n            <span className=\"title\">任务历史</span>\r\n            <span>累计完成任务</span>\r\n            <span className=\"count\">{props.completed.length}</span>\r\n          </div>\r\n          <Polygon dailyTodo={dailyTodo()} totalCompleted={props.completed.length}/>\r\n        </li>\r\n      </ul>\r\n      {history()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;","import React, {useState, useEffect} from 'react';\nimport axios from '@/config/axios';\nimport {useHistory} from 'react-router-dom';\nimport {Menu, Dropdown} from 'antd/es';\nimport {DownOutlined} from '@ant-design/icons';\nimport '@/components/Home/Home.less';\nimport Todos from '@/components/Todos/Todos';\nimport Tomatoes from '@/components/Tomato/Tomatoes';\nimport {Todo, Tomato} from '@/types';\nimport {initTodos} from '@/redux/actions/todos';\nimport {connect} from 'react-redux';\nimport _ from 'lodash';\nimport {format} from 'date-fns';\nimport {initTomatoes} from '@/redux/actions/tomatoes';\nimport Statistics from '@/components/Statistics/Statistics';\n\ninterface Use {\n  id: number\n  name: string\n  avatar: string\n  extra: string\n  account: string\n  created_at: Date\n  updated_at: Date\n  deleted: boolean\n}\n\n\ninterface HomeProps {\n  initTodos: (todos: Todo[]) => void\n  deleted: Todo[]\n  completed: Todo[]\n  unCompleted: Todo[]\n  unfinishedTomatoes: Tomato[]\n  abortTomatoes: Tomato[]\n  finishedTomatoGroup: {}\n  finishedTomatoes: Tomato[]\n  initTomatoes: (payload: Tomato[]) => void\n}\n\nconst Home = (props: HomeProps) => {\n  const history = useHistory();\n\n  const [user, setUser] = useState({} as Use);\n\n  const getMe = async () => {\n    const response = await axios.get('/me');\n    setUser(response.data);\n  };\n\n  const getTodo = async () => {\n    try {\n      const response = await axios.get('todos');\n      const todos = response.data.resources.map((t: Todo) =>\n        Object.assign({}, t, {editing: false})\n      );\n      props.initTodos(todos);\n    } catch (e) {throw new Error(e);}\n  };\n\n  const getTomatoes = async () => {\n    try {\n      const response = await axios.get('tomatoes');\n      const tomatoes = response.data.resources.map((t: Todo) =>\n        Object.assign({}, t, {editing: false})\n      );\n      console.log(tomatoes);\n      props.initTomatoes(tomatoes);\n    } catch (e) {throw new Error(e);}\n  };\n\n  useEffect(() => {\n    getMe();\n    getTodo();\n    getTomatoes();\n  }, []);\n\n  const logout = () => {\n    localStorage.setItem('x-token', '');\n    history.push('/login');\n  };\n\n  const menu = (\n    <Menu>\n      <Menu.Item key=\"1\">\n        <span>偏好设置</span>\n      </Menu.Item>\n      <Menu.Item key=\"2\" onClick={logout}>\n        <span>登出</span>\n      </Menu.Item>\n    </Menu>\n  );\n\n\n  return (\n    <div className=\"index\">\n      <header>\n        <h1>Tomatodo</h1>\n        <Dropdown overlay={menu} trigger={['click']}>\n          <a href=\" \" className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n            <span>{user.account}</span><DownOutlined/>\n          </a>\n        </Dropdown>\n      </header>\n      <main>\n        <Tomatoes finishedTomatoGroup={props.finishedTomatoGroup} unfinishedTomatoes={props.unfinishedTomatoes}/>\n        <Todos completed={props.completed} unCompleted={props.unCompleted}/>\n      </main>\n      <Statistics completed={props.completed}\n                  deleted={props.deleted}\n                  finishedTomatoGroup={props.finishedTomatoGroup}\n                  finishedTomatoes={props.finishedTomatoes}\n                  abortTomatoes={props.abortTomatoes}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: { todos: Todo[], tomatoes: Tomato[] }, ownProps: any) => {\n  const todos = state.todos;\n  const deleted = todos.filter(t => t.deleted);\n  const unDeleted = todos.filter(t => !t.deleted);\n  const completed = unDeleted.filter(t => t.completed) || [];\n  const unCompleted = unDeleted.filter(t => !t.completed) || [];\n  const tomatoes = state.tomatoes;\n  const abortTomatoes = state.tomatoes.filter(t => t.aborted && !t.ended_at);\n  const unfinishedTomatoes = state.tomatoes.filter(t => !t.description && !t.ended_at && !t.aborted);\n  const finishedTomatoes = state.tomatoes.filter(t => t.description && t.ended_at && !t.aborted);\n  const getfinishedTomatoGroup = () => {\n    return _.groupBy(finishedTomatoes, (tomato) => {\n      return format(new Date(tomato.started_at), 'yyyy-MM-d');\n    });\n  };\n  const finishedTomatoGroup = getfinishedTomatoGroup();\n  return {\n    todos,\n    deleted,\n    completed,\n    unCompleted,\n    tomatoes,\n    unfinishedTomatoes,\n    finishedTomatoGroup,\n    finishedTomatoes,\n    abortTomatoes,\n    ...ownProps\n  };\n};\n\nconst mapDispatchToProps = {initTodos, initTomatoes};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport Login from './components/Login/Login';\nimport SignUp from './components/SignUp/SignUp';\nimport Home from './components/Home/Home';\n\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/login\">\n          <Login/>\n        </Route>\n        <Route path=\"/signUp\">\n          <SignUp/>\n        </Route>\n        <Route exact path=\"/\">\n          <Home/>\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from '@/redux/store'\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}